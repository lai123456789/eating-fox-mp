<template>
  <view class="cart-ctner container-same">
    <wxs src="../../utils/filter.wxs" module="tools"></wxs>
    <view class="cart-top">
      <view>每次借阅数量最多10本</view>
      <view>借阅与购买说明</view>
    </view>
    <view class="cart-con-outer">
      <view class="cart-goods-outer">
        <view class="cart-goods-has">
          <repeat for="{{rowsArr}}" key="{{item.id}}" index="index" item="item">
            <CatItem class='cat-itme-wrap' :item="item" :current="index" :userLevel="userLevel"></CatItem>
          </repeat>
        </view>
        <view class="cart-goods-no" wx:if='{{rowsArr.length < 1}}'>
          <image src='../../images/shopping.png'></image>
          <view>空空如也 马上添加</view>
        </view>
      </view>
    </view>
    <view class='cat-bottom'>
      <view class='check-all' @tap='checkAll'>
        <image wx:if= "{{isAllCkeck}}" src='../../images/selected.png' />
        <image wx:else= "{{isAllCkeck}}" src='../../images/uncheck.png' />
        <text>全选</text>
      </view>
      <view class='price-total'>
        <text>总计：</text>
        <text>￥{{totalMoney}}</text>
      </view>
      <view class='pay-btn1' @tap='toBorrow'>借阅</view>
      <view class='pay-btn2' @tap='toSureOrderA'>购买</view>

    </view>
  </view>
  <van-popup
    show="{{ show }}" closeable round position="bottom" custom-style="height: 25%" bind:close="onClose">
    <view class="popup-content">
      <view>您还不能借阅，赶紧来开通会员吧！</view>
      <view class="icx-btn-colorBg-whiteText" @tap="openMember">开通会员</view>
    </view>
  </van-popup>
</template>

<script>
  import wepy from 'wepy';
  import {
    apiCartFindPageF,
    apiChangeQuantityF,
    apiCartDeleteF, apiInfoF
  } from '../../services/cart';
  import {
    apiCreateOrderF
  } from '../../services/mine'

  import { apiGoodsLikePageF } from '../../services/index/index'
  import miniPro from '@/utils/wepy-pro.js';
  import CatItem from '@/components/catItem/index';

  export default class Index extends wepy.page {
    config = {
      navigationBarTitleText: '书包',
      "usingComponents": {
        "van-popup": "/components/vant/popup/index",
      }
    };
    components = {
      CatItem: CatItem
    };

    mixins = [];

    data = {
      show:false,
      userLevel:"",
      pageNum: 0,
      rowsArr: [],
      changeQuantity: {
        id: '',
        type: '',
        current: -1
      },
      isAllCkeck: false,
      totalMoney: 0,
      createData: {
        // channelId: '0', // 需求确认
        orderDetailBoList: []
      },
      delGoosId: '',
      pageParamsLike: {
        page: 0,
        limit: 50
      },
    };

    methods = {
      toBorrow(){
        // if(){ //如果未成为会员 需弹窗引导加入会员  已经是会员 直接跳转借阅确认页面
        this.show = true
        //   return
        // }
        // wepy.navigateTo({ url: `/pages/packageCart/borrowRead/index`});
      },
      openMember(){
        wepy.navigateTo({ url: `/pages/packageMine/joinMembers/index`});
      },
      onClose(){
        this.show = false
      },
      toSureOrderA() {
        console.log(this.rowsArr)
        this.apiCreateOrderA(this.apiCreateOrderA.bind(this))
      },
      checkAll() {
        this.rowsArr.forEach(val => val.check = !this.isAllCkeck)
      },
      toGoodsDetail(item) {
        miniPro.toGoodsDetail(item.id, item.groupPurchase)
      }
    };

    apiCreateOrderA(fun) {
      let ids = [];
      for(let x in this.rowsArr){
        if(this.rowsArr[x].check){
          ids.push(this.rowsArr[x].id);
        }
      }
      console.log(ids);
      if (ids.length == 0){
        miniPro.showToast("请先选择图书！")
        return
      }
      /* prepareType 参数备注：
        *
        * */
      wepy.navigateTo({ url: `/pages/packageMine/sureOrder/index?prepareType=1&cartIds=${ids}`});
    }
    apiCartFindPageA(fun) {
      let _pageNum = this.pageNum
      apiCartFindPageF({
        page: _pageNum
      }, fun).then(msg => {
        let { rows } = msg
        this.rowsArr = rows.map((val) => {
          val.check = false
          console.log(val)
          return val
        })
        console.log(this.rowsArr)
        this.$apply()
      }).catch(() => { })
    }
    apiChangeQuantityA(fun) {
      apiChangeQuantityF({
        id: this.changeQuantity.id,
        type: this.changeQuantity.type
      }, fun).then(msg => {
        this.rowsArr[this.changeQuantity.current].quantity = msg.quantity
        this.$apply()
      }).catch(() => { })
    }
    apiCartDeleteA(fun) {
      apiCartDeleteF(this.delGoosId, fun).then(msg => {
        this.rowsArr.splice(this.changeQuantity.current, 1)
        this.$apply()
      }).catch(() => { })
    }



    watch = {
      rowsArr (newValue) {
        let _newValue = newValue
        this.isAllCkeck = _newValue.every(val => {
          return val.check
        })
        let _totalMoney = 0;
        let _createData = []
        _newValue.forEach((val) => {
          if (val.check) {
            if (this.userLevel == 0){
              _totalMoney = (_totalMoney * 1000 + val.price * val.quantity * 1000) / 1000
            }else{
              _totalMoney = (_totalMoney * 1000 + val.vipPrice * val.quantity * 1000) / 1000
            }
            _createData.push({
              cartId: val.id,
              goodsId: val.goodsId,
              specificationId: val.specificationId,
              colorId: val.colorId,
              goodsNumber: val.quantity
            })
          }
        });
        if(_totalMoney){
          _totalMoney = _totalMoney.toFixed(2)
        }
        this.totalMoney = _totalMoney
        this.createData.orderDetailBoList = _createData
      }
    }
    events = {
      'calt-item-check': (index, check) => {
        this.rowsArr[index].check = check

        this.$apply()
      },
      'num-change-event': (index, type) => {
        this.changeQuantity.id = this.rowsArr[index].id
        this.changeQuantity.type = type
        this.changeQuantity.current = index
        this.apiChangeQuantityA(this.apiChangeQuantityA.bind(this))
        this.$apply()
      },
      'calt-item-del': (index) => {
        let _self = this
        miniPro.showConfirm({
          title: '提示',
          content: '确定删除该商品？',
          callback(flag) {
            if (!flag) return
            _self.changeQuantity.current = index
            _self.delGoosId = _self.rowsArr[index].id
            _self.apiCartDeleteA(_self.apiCartDeleteA.bind(_self))
          }
        })
      }
    };
    apiGetInfoFA(fun) { //获取用户信息
      let _self = this
      apiInfoF(fun).then(msg => {
        _self.userLevel = msg.userLevel
        _self.$apply();
      }).catch(() => { });
    }
    async onShow() {
      // let length = this.rowsArr.length
      // wx.setTabBarBadge({ //设置导航栏 右上角角标提示
      //   index: 2,
      //   text: "3"
      // })
      this.apiGetInfoFA(this.apiGetInfoFA.bind(this))
      this.apiCartFindPageA(this.apiCartFindPageA.bind(this))
      this.apiGoodsLikePageFA(this.apiGoodsLikePageFA.bind(this))
    }
  }
</script>
<style lang="scss">
  @import './index.scss';
</style>
